package com.example.demo.controller;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.imageio.ImageIO;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblWidth;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STTblWidth;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.entity.Poc;
import com.example.demo.entity.PocDes;
import com.example.demo.entity.Test;
import com.example.demo.entity.Vulnerabilityfound;
import com.example.demo.service.ServiceImplementations;

@RestController
@RequestMapping("vfound")
@CrossOrigin(origins = "http://localhost:4200")
public class VulnerabilityFoundController {

	private ServiceImplementations serimp;

	@Autowired
	public VulnerabilityFoundController(ServiceImplementations serimp) {
		this.serimp = serimp;
	}
	
	@GetMapping("/list")
	public List<Vulnerabilityfound> displayAllVFound() throws InvalidFormatException, IOException{
		List<Vulnerabilityfound> vfound = serimp.DisplayAllVulfound();
		
		return vfound;
	}
	

	@PostMapping(value={"/list"},consumes= {MediaType.MULTIPART_FORM_DATA_VALUE})
	public void insertvfound(@RequestPart("vfound") Vulnerabilityfound vfound, @RequestPart("imgfile") MultipartFile[] file,@RequestPart("pocdes") String[] pocdes) {
		//serimp.insertTest(test);
		
		try {
			List<Poc> pics = uploadimg(file,pocdes); 	
			vfound.setPoc(pics);
			serimp.insertVulfound(vfound);
			uploadimg(file,pocdes); 
		}catch(Exception e) {
			//System.out.println(e.getMessage());
		}
		
	}

	
	public List<Poc> uploadimg(MultipartFile[] multipartFiles,String[] pocdes) throws IOException {
		List<Poc> imgs = new ArrayList();
		int i=0;
		for(MultipartFile file:multipartFiles) {
			//String[] pds = pocdes.toArray(new String[pocdes.size()]);
			String str = new String(pocdes[i]);
			PocDes pd = new PocDes(str);
			Set<PocDes> pdset = new HashSet<>();
			pdset.add(pd);
			Poc img = new Poc(file.getOriginalFilename(),
					file.getContentType(),
					file.getBytes(),pdset 
					);
			//System.out.println(file.getOriginalFilename()+" "+i);
			imgs.add(img);
			i++;
		}
		return imgs;
	}

	@DeleteMapping("/list/{id}")
	public void DeleteVulfound(@PathVariable("id") int id) {
		serimp.deleteVulfound(id);
	}
	
	
	@PutMapping(value={"/list1"},consumes= {MediaType.MULTIPART_FORM_DATA_VALUE})
	public void updVfound(@RequestPart("vfound") Vulnerabilityfound vfound, @RequestPart("imgfile") MultipartFile[] file,@RequestPart("pocdes") String[] pocdes) {
		//serimp.insertTest(test);
		
		try {
			List<Poc> pics = uploadimg(file,pocdes); 	
			vfound.setPoc(pics);
			serimp.updateVulfound(vfound);
			uploadimg(file,pocdes); 
		}catch(Exception e) {
			//System.out.println(e.getMessage());
		}
		
	}
	
	
	
	@PutMapping("/list")
	public void updateVfound(@RequestBody Vulnerabilityfound vfound) {
		serimp.updateVulfound(vfound);
	}
	
	@GetMapping("list1/{tid}")
	public List<Vulnerabilityfound> searchByTid(@PathVariable("tid") int tid){
		List<Vulnerabilityfound> vflist = serimp.searchByTid(tid);
		return vflist;
	}
	
	
	@GetMapping("/list/{id}")
	public Vulnerabilityfound displayVFoundById(@PathVariable("id") int id) throws InvalidFormatException, IOException{
		if(id==0) {
			return null;
		}
		else {
		Vulnerabilityfound vfound = serimp.getVulfoundById(id);
	      return vfound;
		}
	}
	
	
	public void conbytoimg(byte[] byt) throws IOException {
	      ByteArrayInputStream bis = new ByteArrayInputStream(byt);
	      BufferedImage bImage2 = ImageIO.read(bis);
	      ImageIO.write(bImage2, "png", new File("E:\\hi.png") );
	      //System.out.println("image created");
	}
	
	
//	public void genreport(List<Vulnerabilityfound> vfoundlist) throws InvalidFormatException, IOException {
//		XWPFDocument document = new XWPFDocument(); // Create a new document
//		for(int m=0;m<vfoundlist.size();m++) {
//			Vulnerabilityfound vfound = vfoundlist.get(m);
//		
//			List<Poc> plist = vfound.getPoc();
//		
//		
//		
//		// Load an existing document using XWPFDocument(InputStream)
//		int numRows = 8+vfound.getPoc().size();
//		int numCols = 2;
//		XWPFTable table = document.createTable(numRows, numCols);
//		
//		XWPFTableRow tableRow1 = table.getRow(0);
//	      tableRow1.setHeight(10);
//	      tableRow1.getCell(0).setText("Observation No 1");
//	      tableRow1.getCell(0).setColor("FF0000");
//	      
//	      
//	      XWPFTableCell cellToMerge = tableRow1.getCell(0); // For example, cell at row 1, column 1
//	      XWPFTableCell targetCell = tableRow1.getCell(1); // For example, cell at row 2, column 2
//
//	      if (cellToMerge.getCTTc().getTcPr() == null) cellToMerge.getCTTc().addNewTcPr();
//	      if (cellToMerge.getCTTc().getTcPr().isSetGridSpan()) cellToMerge.getCTTc().getTcPr().unsetGridSpan();
//	      cellToMerge.getCTTc().getTcPr().addNewGridSpan().setVal(BigInteger.valueOf(2)); // Merge two cells horizontally
//
//	      // Remove the paragraph in the merged cell
//	      for (int i = cellToMerge.getParagraphs().size() - 1; i > 0; i--) {
//	          cellToMerge.removeParagraph(i);
//	      }
//	      
//	      //tableRow1.removeCell(1);
//	      XWPFTableCell removed = tableRow1.getCell(1);
//	      removed.getCTTc().newCursor().removeXml();
//	      tableRow1.removeCell(1);
//	      
//	     
//	      int[] columnWidths = {2000, 6700};
//	      
//	      for (int i = 1; i < table.getNumberOfRows()-2; i++) {
//	            XWPFTableRow row = table.getRow(i);
//	            for (int j = 0; j < row.getTableCells().size(); j++) {
//	                XWPFTableCell cell = row.getCell(j);
//	                CTTblWidth width = cell.getCTTc().addNewTcPr().addNewTcW();
//	                width.setType(STTblWidth.DXA); // Set width type to twentieths of a point
//	                width.setW(BigInteger.valueOf(columnWidths[j]));
//	            }
//	        }
//	      
//	      
//	      
//	      
//	      String[] colors = {"800808","FF0000","F4C430","DFFF00","32CD32"};
//	      String[] severity = {"Critical","High","Medium","Low","Informational"};
//	      
//	      XWPFTableRow tableRowtwo = table.getRow(1);
//	      tableRowtwo.getCell(0).setText("Vulnerability");
//	      tableRowtwo.getCell(1).setText(vfound.getVfname());
//	     
//
//	      XWPFTableRow tableRow3 = table.getRow(2);
//	      
//	      tableRow3.getCell(0).setText("Severity");
//	      tableRow3.getCell(1).setText(vfound.getSeverity());
//	      
//	    
//	      for(int sev=0;sev<severity.length;sev++) {
//	    	  if(vfound.getSeverity().equalsIgnoreCase(severity[sev])) {
//	    		  tableRow3.getCell(1).setColor(colors[sev]);
//	    	  }
//	      }
//	      
//	      
////	      
//	      XWPFTableRow tableRow4 = table.getRow(3);
//	    
//	      tableRow4.getCell(0).setText("Description");
//	      tableRow4.getCell(1).setText(vfound.getDescription());
//	      
//	      XWPFTableRow tableRow5 = table.getRow(4);
//	      
//         tableRow5.getCell(0).setText("Remediation");
//	      tableRow5.getCell(1).setText(vfound.getRemediation());
////	      
////
//	      XWPFTableRow tableRow6 = table.getRow(5);
////	     
//	      tableRow6.getCell(0).setText("Affected Files");
//	      tableRow6.getCell(1).setText(vfound.getAffectedurls());
////	      
////	      
//        XWPFTableRow tableRow7 = table.getRow(6);
////      
//          tableRow7.getCell(0).setText("References");
//	      tableRow7.getCell(1).setText(vfound.getVreferences());
//	    		  
//	      XWPFTableRow tableRow8 = table.getRow(7);
////	     
//          tableRow8.getCell(0).setText("Proof of Concept");
//	      tableRow8.getCell(1).setText("See Below");
////	      
//	      
//	      
//	      for(int j=8;j<8+vfound.getPoc().size();j++) {
//	    	  
//	    	  	Poc pc = plist.get(j-8);
//	  			byte[] byt = pc.getPic_byte();
//	  			//System.out.println(byt);
//	  			conbytoimg(byt);
//	  		
//	      	XWPFTableCell cell = null;
//			XWPFTableRow tableRow9 = table.getRow(j);
//
//			// First Row
//
//			XWPFTableCell cellToMerge1 = tableRow9.getCell(0); // For example, cell at row 1, column 1
//			XWPFTableCell targetCell1 = tableRow9.getCell(1); // For example, cell at row 2, column 2
//
//			if (cellToMerge1.getCTTc().getTcPr() == null)
//				cellToMerge1.getCTTc().addNewTcPr();
//			if (cellToMerge1.getCTTc().getTcPr().isSetGridSpan())
//				cellToMerge1.getCTTc().getTcPr().unsetGridSpan();
//			cellToMerge1.getCTTc().getTcPr().addNewGridSpan().setVal(BigInteger.valueOf(2)); // Merge two cells horizontally
//
//			// Remove the paragraph in the merged cell
//			for (int i = cellToMerge1.getParagraphs().size() - 1; i > 0; i--) {
//				cellToMerge1.removeParagraph(i);
//			}
//
//			//tableRow9.removeCell(1);
//			XWPFTableCell removed1 = tableRow9.getCell(1);
//		      removed1.getCTTc().newCursor().removeXml();
//		      tableRow9.removeCell(1);
//
//			cell = tableRow9.getCell(0);
//			
//			XWPFParagraph paragraph = cell.addParagraph();
//			XWPFRun run = paragraph.createRun();
//			paragraph.setIndentFromLeft(1000);
//			String desc = null;
//			Set<PocDes> pdset = pc.getPocdes();
//			for(PocDes pd:pdset) {
//				desc = pd.getPdesc();
//			}
//			run.setText(desc);
//			XWPFParagraph paragraph1 = cell.addParagraph();
//			XWPFRun run1 = paragraph1.createRun();
//
//			
//			File image = new File("E:\\hi.png");
//			FileInputStream imageData = new FileInputStream(image);
//
//			// Step 5: Retrieving the image file name and image
//			// type
//			int imageType = XWPFDocument.PICTURE_TYPE_JPEG;
//			String imageFileName = image.getName();
//
//			// Step 6: Setting the width and height of the image
//			// in pixels.
//			int width = 350;
//			int height = 250;
//
//			// Step 7: Adding the picture using the addPicture()
//			// method and writing into the document
//			run1.addPicture(imageData, imageType, imageFileName, Units.toEMU(width), Units.toEMU(height));
//			
//			 XWPFParagraph paragraph2 = document.createParagraph();
//		     paragraph2.setPageBreak(true);
//	      }
//	      FileOutputStream out;
//			try {
//				
//				out = new FileOutputStream(new File("E:\\hello4.docx"));
//				 
//				document.write(out);
//			      out.close();
//			} catch (FileNotFoundException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		
//		}
		
//	}
	
}
